# In this project, I downloaded Spotify data from Kaggle. 
# I then created a table and inserted the Spotify data. 
# Lastly, I used SQL to perform data analysis. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL);

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--What are the top ten most popular tracks? 
SELECT track_name, artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

--What is the average danceability, energy, and valence of the tracks? 
SELECT AVG(danceability) AS avg_danceability,
       AVG(energy) AS avg_energy,
       AVG(valence) AS avg_valence
FROM BIT_DB.Spotifydata;

--Which artist has the highest average loudness? 
SELECT artist_name, AVG(loudness) AS avg_loudness
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_loudness DESC
LIMIT 1;

--Determine the distribution of tracks by time signature.
SELECT time_signature, COUNT(*) AS track_count
FROM Spotifydata
GROUP BY time_signature
ORDER BY time_signature;

--How many artists had multiple songs in the top 50, and what was their average popularity?
SELECT artist_name, COUNT(*) AS song_count, AVG(popularity) AS avg_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(*) > 1
ORDER BY avg_popularity DESC;

--What is the longest song in the database? 
SELECT track_name, artist_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 1;

--Who are the top 10 artists based on popularity?
SELECT artist_name, SUM(popularity) AS total_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY total_popularity DESC
LIMIT 10;

--Which song is the shortest but most danceable? 
SELECT track_name, artist_name, duration_ms, danceability
FROM BIT_DB.Spotifydata
ORDER BY duration_ms ASC, danceability DESC
LIMIT 1;

--Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
SELECT  artist_name,
        average_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity >= 90; 
